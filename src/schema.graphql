scalar Date

input CreateChannelInput {
  name: String!
}

input CreateUserInput {
  id: ID!
  username: String!
  firstname: String
  lastName: String
  age: Float
}

input CreateMessageInput {
  text: String!
  userId: ID!
  channelId: ID!
}

type User {
  id: ID!
  username: String!
  firstname: String
  lastName: String
  age: Float
  channels: [Channel]
}

type Message {
  id: ID!
  text: String
  owner: User
  channel: Channel
  createdAt: Date
  updateAt: Date
}

type Channel {
  id: ID!
  name: String!
  createdAt: Date
  users: [User]!
  messages: [Message]
}

type Query {
  user(id: ID!): User
}

type Mutation {
  createUser(input: CreateUserInput!): User
  createMessage(input: CreateMessageInput!): Message
  createChannel(input: CreateChannelInput!): Channel
  addUserToChannel(userId: ID!, channelId: ID!): User
}

type Subscription {
  onCreateUser: User
  onCreateMessage(channelId: ID!): Message
  onCreateChannel: Channel
  onAddUserToChannel(channelId: ID!): User
}